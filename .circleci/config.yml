version: 2
jobs:
  build:
    working_directory: ~/jimoshare
    docker:
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          DATABASE_URL: postgres://postgres:password@localhost:5432/myapp_test
          RAILS_ENV: test
      - image: circleci/postgres:11-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - jimoshare-bundle-v1-{{ checksum "Gemfile.lock" }}
            - jimoshare-bundle-v1-
      - run:
          name: Bundlerをinstall
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - save_cache:
          key: jimoshare-bundle-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-
      - run:
          name: Yarnをinstall
          command: yarn install --cache-folder ~/.cache/yarn
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:create db:schema:load --trace
      - run: bundle exec bin/webpack
      - run:
          name: execute rspec
          command: bundle exec rspec
      - store_test_results:
          path: /tmp/test-results

commands:
  # 依存関係のキャッシュを行うコマンド類
  # 詳しくは https://circleci.com/docs/ja/2.0/caching/
  # Bundlerのキャッシュ系コマンド
  # https://circleci.com/docs/ja/2.0/caching/#bundler-ruby
  restore-bundle-cache:
    steps:
      - restore_cache:
          keys:
            - v2-gem-cache-docker-sample-{{ checksum "Gemfile.lock" }}
            - v2-gem-cache-docker-sample-
  save-bundle-cache:
    steps:
      - save_cache:
          key: v2-gem-cache-docker-sample-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - ~/.bundle
  # Yarnのキャッシュ系コマンド
  # https://circleci.com/docs/ja/2.0/caching/#yarn-node
  restore-yarn-cache:
    steps:
      - restore_cache:
          keys:
            - yarn-packages-docker-sample-v2-{{ checksum "yarn.lock" }}
            - yarn-packages-docker-sample-v2-
  save-yarn-cache:
    steps:
      - save_cache:
          key: yarn-packages-docker-sample-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  # Bundlerのインストール系コマンド
  install-bundler:
    steps:
      - run:
          name: Install bundler(2.1.2)
          command: gem install bundler:2.1.2
  bundle-install:
    steps:
      - run:
          name: Bundle install
          command: bundle check --path=vendor/bundle || bundle install --jobs=4 --retry=3 --path vendor/bundle

  # RSpecを実行するための設定系コマンド（主にフロントエンド部分）
  test-client-settings:
    steps:
      - run:
          name: RSpec Setup for webpacker
          command: |
            yarn install --check-files --cache-folder ~/.cache/yarn
            NODE_ENV=production bin/rails webpacker:compile
  # テストDB設定関連のコマンド
  # https://circleci.com/docs/ja/2.0/postgres-config/
  test-db-settings:
    steps:
      - run:
          name: Create test database
          command: |
            cp config/{database_circleci,database}.yml
            bin/rails db:schema:load --trace
  # ワークスペース関連のコマンド
  save-workspace:
    steps:
      - persist_to_workspace:
          # working_directory からの相対パスか絶対パスを指定します
          root: .
          paths: .
  using-workspace:
    steps:
      - attach_workspace:
          # working_directory からの相対パスか絶対パスを指定します
          at: .
  # Linter関連のコマンド
  linter:
    steps:
      - run:
          name: Rubocop
          command: bundle exec rubocop --require rubocop-rspec -D -P
      - run:
          name: Rails Best Practices
          command: bundle exec rails_best_practices .
      - run:
          name: Brakeman
          command: bundle exec brakeman
